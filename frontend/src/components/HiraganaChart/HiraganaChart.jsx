import React, { useState, useEffect } from 'react';
import './HiraganaChart.css';
import WritingGrid from '../WritingGrid/WritingGrid';
import { useAuth } from '../../context/AuthContext';
import { characterService } from '../../api/characterService';

// ÁîªÂÉè„ÅÆ„Çà„ÅÜ„Å™Ë°®ÂΩ¢Âºè„ÅÆ2Ê¨°ÂÖÉÈÖçÂàó„Éá„Éº„Çø
const mainTable = [
  ['„Çì','„Çè','„Çâ','„ÇÑ','„Åæ','„ÅØ','„Å™','„Åü','„Åï','„Åã','„ÅÇ'],
  ['','','„Çä','','„Åø','„Å≤','„Å´','„Å°','„Åó','„Åç','„ÅÑ'],
  ['','','„Çã','„ÇÜ','„ÇÄ','„Åµ','„Å¨','„Å§','„Åô','„Åè','„ÅÜ'],
  ['','','„Çå','','„ÇÅ','„Å∏','„Å≠','„Å¶','„Åõ','„Åë','„Åà'],
  ['','„Çí','„Çç','„Çà','„ÇÇ','„Åª','„ÅÆ','„Å®','„Åù','„Åì','„Åä'],
];

// ÊøÅÈü≥„ÉªÂçäÊøÅÈü≥„ÉÜ„Éº„Éñ„É´ÔºàÁ©∫ÁôΩ„Çª„É´„Å™„ÅóÔºâ
const dakuonTable = [
  ['„Åå','„Åñ','„Å†','„Å∞','„Å±'],
  ['„Åé','„Åò','„Å¢','„Å≥','„Å¥'],
  ['„Åê','„Åö','„Å•','„Å∂','„Å∑'],
  ['„Åí','„Åú','„Åß','„Åπ','„Å∫'],
  ['„Åî','„Åû','„Å©','„Åº','„ÅΩ'],
];

// ÊãóÈü≥„ÉÜ„Éº„Éñ„É´Ôºà„Åç„ÇÉ„Äú„Å≥„Çá„ÅÜÔºâ
const youonTable = [
  ['„Åç„ÇÉ','„Åé„ÇÉ','„Åó„ÇÉ','„Åò„ÇÉ','„Å°„ÇÉ','„Å´„ÇÉ','„Å≤„ÇÉ','„Å≥„ÇÉ','„Å¥„ÇÉ','„Åø„ÇÉ','„Çä„ÇÉ'],
  ['„Åç„ÇÖ','„Åé„ÇÖ','„Åó„ÇÖ','„Åò„ÇÖ','„Å°„ÇÖ','„Å´„ÇÖ','„Å≤„ÇÖ','„Å≥„ÇÖ','„Å¥„ÇÖ','„Åø„ÇÖ','„Çä„ÇÖ'],
  ['„Åç„Çá','„Åé„Çá','„Åó„Çá','„Åò„Çá','„Å°„Çá','„Å´„Çá','„Å≤„Çá','„Å≥„Çá','„Å¥„Çá','„Åø„Çá','„Çä„Çá'],
];

const HiraganaChart = ({ onClose }) => {
  const [selectedChar, setSelectedChar] = useState(null);
  const [showWritingGrid, setShowWritingGrid] = useState(false);
  const { isAuthenticated } = useAuth();
  const [progressData, setProgressData] = useState({});
  const [currentPage, setCurrentPage] = useState(0); // 0: Ê∏ÖÈü≥„Éö„Éº„Ç∏, 1: ÊøÅÈü≥„ÉªÂçäÊøÅÈü≥„Éö„Éº„Ç∏, 2: ÊãóÈü≥„Éö„Éº„Ç∏
  const totalPages = 3;

  // „Å≤„Çâ„Åå„Å™„Åã„ÇâID„Å∏„ÅÆÂ§âÊèõ„Éû„ÉÉ„Éî„É≥„Ç∞
  const hiraganaToIds = {
    '„ÅÇ': 1, '„ÅÑ': 2, '„ÅÜ': 3, '„Åà': 4, '„Åä': 5,
    '„Åã': 6, '„Åç': 7, '„Åè': 8, '„Åë': 9, '„Åì': 10,
    '„Åï': 11, '„Åó': 12, '„Åô': 13, '„Åõ': 14, '„Åù': 15,
    '„Åü': 16, '„Å°': 17, '„Å§': 18, '„Å¶': 19, '„Å®': 20,
    '„Å™': 21, '„Å´': 22, '„Å¨': 23, '„Å≠': 24, '„ÅÆ': 25,
    '„ÅØ': 26, '„Å≤': 27, '„Åµ': 28, '„Å∏': 29, '„Åª': 30,
    '„Åæ': 31, '„Åø': 32, '„ÇÄ': 33, '„ÇÅ': 34, '„ÇÇ': 35,
    '„ÇÑ': 36, '„ÇÜ': 37, '„Çà': 38,
    '„Çâ': 39, '„Çä': 40, '„Çã': 41, '„Çå': 42, '„Çç': 43,
    '„Çè': 44, '„Çí': 45, '„Çì': 46,
    // ÊøÅÈü≥„ÉªÂçäÊøÅÈü≥„ÉªÊãóÈü≥„ÅÆID„ÇÇÂøÖË¶Å„Å´Âøú„Åò„Å¶ËøΩÂä†
    '„Åå': 47, '„Åé': 48, '„Åê': 49, '„Åí': 50, '„Åî': 51,
    '„Åñ': 52, '„Åò': 53, '„Åö': 54, '„Åú': 55, '„Åû': 56,
    '„Å†': 57, '„Å¢': 58, '„Å•': 59, '„Åß': 60, '„Å©': 61,
    '„Å∞': 62, '„Å≥': 63, '„Å∂': 64, '„Åπ': 65, '„Åº': 66,
    '„Å±': 67, '„Å¥': 68, '„Å∑': 69, '„Å∫': 70, '„ÅΩ': 71,
    '„Åç„ÇÉ': 72, '„Åç„ÇÖ': 73, '„Åç„Çá': 74,
    '„Åó„ÇÉ': 75, '„Åó„ÇÖ': 76, '„Åó„Çá': 77,
    '„Å°„ÇÉ': 78, '„Å°„ÇÖ': 79, '„Å°„Çá': 80,
    '„Å´„ÇÉ': 81, '„Å´„ÇÖ': 82, '„Å´„Çá': 83,
    '„Å≤„ÇÉ': 84, '„Å≤„ÇÖ': 85, '„Å≤„Çá': 86,
    '„Åø„ÇÉ': 87, '„Åø„ÇÖ': 88, '„Åø„Çá': 89,
    '„Çä„ÇÉ': 90, '„Çä„ÇÖ': 91, '„Çä„Çá': 92,
    '„Åé„ÇÉ': 93, '„Åé„ÇÖ': 94, '„Åé„Çá': 95,
    '„Åò„ÇÉ': 96, '„Åò„ÇÖ': 97, '„Åò„Çá': 98,
    '„Å≥„ÇÉ': 99, '„Å≥„ÇÖ': 100, '„Å≥„Çá': 101,
    '„Å¥„ÇÉ': 102, '„Å¥„ÇÖ': 103, '„Å¥„Çá': 104
  };

  // „Å≤„Çâ„Åå„Å™„Åã„Çâ„É≠„Éº„ÉûÂ≠ó„Å∏„ÅÆÂ§âÊèõ„Éû„ÉÉ„Éî„É≥„Ç∞ (Ë£úÂä©ÁöÑ„Å´ÊÆã„Åó„Å¶„Åä„Åè)
  const hiraganaToRomaji = {
    '„ÅÇ': 'a', '„ÅÑ': 'i', '„ÅÜ': 'u', '„Åà': 'e', '„Åä': 'o',
    '„Åã': 'ka', '„Åç': 'ki', '„Åè': 'ku', '„Åë': 'ke', '„Åì': 'ko',
    '„Åï': 'sa', '„Åó': 'shi', '„Åô': 'su', '„Åõ': 'se', '„Åù': 'so',
    '„Åü': 'ta', '„Å°': 'chi', '„Å§': 'tsu', '„Å¶': 'te', '„Å®': 'to',
    '„Å™': 'na', '„Å´': 'ni', '„Å¨': 'nu', '„Å≠': 'ne', '„ÅÆ': 'no',
    '„ÅØ': 'ha', '„Å≤': 'hi', '„Åµ': 'fu', '„Å∏': 'he', '„Åª': 'ho',
    '„Åæ': 'ma', '„Åø': 'mi', '„ÇÄ': 'mu', '„ÇÅ': 'me', '„ÇÇ': 'mo',
    '„ÇÑ': 'ya', '„ÇÜ': 'yu', '„Çà': 'yo',
    '„Çâ': 'ra', '„Çä': 'ri', '„Çã': 'ru', '„Çå': 're', '„Çç': 'ro',
    '„Çè': 'wa', '„Çí': 'wo', '„Çì': 'n'
  };

  // ÈÄ≤Êçó„Éá„Éº„Çø„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
  useEffect(() => {
    const fetchProgressData = async () => {
      if (!isAuthenticated) return;
      
      try {
        // ÂêÑ„Å≤„Çâ„Åå„Å™„ÅÆÈÄ≤ÊçóÁä∂Ê≥Å„ÇíÂèñÂæó
        const progressDataTemp = {};
        
        for (const [char, id] of Object.entries(hiraganaToIds)) {
          try {
            const results = await characterService.getAllStrokeResults(id);
            if (results && Array.isArray(results)) {
              // 60ÁÇπ‰ª•‰∏ä„ÅÆ„Çπ„Éà„É≠„Éº„ÇØ„ÅÆÊï∞„Çí„Ç´„Ç¶„É≥„Éà
              const goodScoresCount = results.filter(r => r.score >= 60).length;
              // „Å™„Åû„ÇäÊõ∏„ÅçÁµêÊûú„ÅÆÁ∑èÊï∞
              const totalResults = results.length;
              
              progressDataTemp[char] = {
                total: totalResults,
                goodCount: goodScoresCount,
                status: getProgressStatus(goodScoresCount, totalResults)
              };
            }
          } catch (error) {
            console.log(`${char}„ÅÆÈÄ≤ÊçóÂèñÂæó„Ç®„É©„Éº:`, error);
          }
        }
        
        setProgressData(progressDataTemp);
      } catch (error) {
        console.error('ÈÄ≤Êçó„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
      }
    };
    
    fetchProgressData();
  }, [isAuthenticated]);

  // ÈÄ≤ÊçóÁä∂ÊÖã„ÇíÂà§ÂÆö„Åô„ÇãÈñ¢Êï∞
  const getProgressStatus = (goodScoresCount, totalResults) => {
    if (totalResults === 0) return 'not-started';        // ÁµêÊûú„Å™„Åó
    if (goodScoresCount === 0) return 'attempted';       // ÁµêÊûú„ÅÇ„Çä„ÄÅ60ÁÇπ‰ª•‰∏ä„Å™„Åó
    if (goodScoresCount >= 9) return 'completed';        // 9‰ª∂„Åô„Åπ„Å¶60ÁÇπ‰ª•‰∏ä
    if (goodScoresCount >= 1) return 'in-progress';      // 1‰ª∂‰ª•‰∏ä9‰ª∂Êú™Ê∫Ä
    return 'not-started';
  };

  const handleCharClick = (char) => {
    if (char) {
      const id = hiraganaToIds[char] || null;
      const romaji = hiraganaToRomaji[char] || '';
      
      setSelectedChar({
        id: id,  // Êï∞ÂÄ§ID„ÇíË®≠ÂÆö
        char: char,
        romaji: romaji,
        image: ''
      });
      setShowWritingGrid(true);
    }
  };

  const handleCloseWritingGrid = () => {
    setShowWritingGrid(false);
    setSelectedChar(null);
    
    // WritingGridÈñâ„Åò„ÅüÂæå„Å´ÈÄ≤Êçó„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
    if (isAuthenticated && selectedChar) {
      const fetchCharProgress = async () => {
        try {
          const id = selectedChar.id;
          const char = selectedChar.char;
          const results = await characterService.getAllStrokeResults(id);
          
          if (results && Array.isArray(results)) {
            const goodScoresCount = results.filter(r => r.score >= 60).length;
            const totalResults = results.length;
            
            setProgressData(prev => ({
              ...prev,
              [char]: {
                total: totalResults,
                goodCount: goodScoresCount,
                status: getProgressStatus(goodScoresCount, totalResults)
              }
            }));
          }
        } catch (error) {
          console.error('ÊñáÂ≠ó„ÅÆÈÄ≤ÊçóÊõ¥Êñ∞„Ç®„É©„Éº:', error);
        }
      };
      
      fetchCharProgress();
    }
  };

  // „ÅäÂºÅÂΩì„Ç¢„Ç§„Ç≥„É≥„ÇíÊñáÂ≠ó„ÅÆ‰∏ãÈÉ®„Å´5+4„ÅÆ2ÊÆµ„ÅßË°®Á§∫ÔºàÁ©∫ÁôΩ„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº„ÅßÈ´ò„Åï„ÇíÊèÉ„Åà„ÇãÔºâ
  const renderBentoStack = (count) => {
    const topRow = [];
    const bottomRow = [];
    for (let i = 0; i < 5; i++) {
      topRow.push(
        <span key={i} className="bento-stack-item">
          {i < count ? 'üç±' : <span className="bento-placeholder"></span>}
        </span>
      );
    }
    for (let i = 5; i < 9; i++) {
      bottomRow.push(
        <span key={i} className="bento-stack-item">
          {i < count ? 'üç±' : <span className="bento-placeholder"></span>}
        </span>
      );
    }
    return (
      <div className="bento-stack">
        <div className="bento-stack-row">{topRow}</div>
        <div className="bento-stack-row">{bottomRow}</div>
      </div>
    );
  };

  return (
    <div className="hiragana-chart-modal-bg">
      <div className="hiragana-chart-modal">
        <div className="hiragana-chart-header">
          <h2>„Å≤„Çâ„Åå„Å™Ë°®</h2>
          <div className="chart-page-tabs-horizontal">
            {[1,2,3].map((num, idx) => (
              <button
                key={num}
                className={`chart-page-tab${currentPage === idx ? ' active' : ''}`}
                onClick={() => setCurrentPage(idx)}
              >
                {num}
              </button>
            ))}
          </div>
          <button className="hiragana-chart-close-btn" onClick={onClose}>√ó</button>
        </div>
        <div className="chart-table-wrap">
          <div className="hiragana-chart-content">
            {currentPage === 0 ? (
              // Ê∏ÖÈü≥„Éö„Éº„Ç∏
              <table className="hiragana-table">
                <tbody>
                  {mainTable.map((row, i) => (
                    <tr key={i}>
                      {row.map((cell, j) => {
                        // ÈÄ≤ÊçóÁä∂ÊÖã„ÅÆ„ÇØ„É©„Çπ„ÇíÂèñÂæó
                        const progressStatus = cell && progressData[cell] ? progressData[cell].status : '';
                        const progressClass = cell ? `char-cell progress-${progressStatus}` : 'empty';
                        
                        return (
                          <td 
                            key={j} 
                            className={progressClass} 
                            onClick={() => cell ? handleCharClick(cell) : null}
                          >
                            {cell ? (
                              <div className="cell-content">
                                <div className="char-box">{cell}</div>
                                <div className="char-bento-divider"></div>
                                <div className="bento-box">
                                  {renderBentoStack(progressData[cell] ? progressData[cell].goodCount : 0)}
                                </div>
                              </div>
                            ) : null}
                          </td>
                        );
                      })}
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : currentPage === 1 ? (
              // ÊøÅÈü≥„ÉªÂçäÊøÅÈü≥„Éö„Éº„Ç∏
              <table className="hiragana-table dakuon-table">
                <tbody>
                  {dakuonTable.map((row, i) => (
                    <tr key={i}>
                      {row.map((cell, j) => {
                        // ÈÄ≤ÊçóÁä∂ÊÖã„ÅÆ„ÇØ„É©„Çπ„ÇíÂèñÂæó
                        const progressStatus = cell && progressData[cell] ? progressData[cell].status : '';
                        const progressClass = `char-cell progress-${progressStatus}`;
                        
                        return (
                          <td 
                            key={j} 
                            className={progressClass}
                            onClick={() => handleCharClick(cell)}
                          >
                            {cell ? (
                              <div className="cell-content">
                                <div className="char-box">{cell}</div>
                                <div className="char-bento-divider"></div>
                                <div className="bento-box">
                                  {renderBentoStack(progressData[cell] ? progressData[cell].goodCount : 0)}
                                </div>
                              </div>
                            ) : null}
                          </td>
                        );
                      })}
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : (
              // 3„Éö„Éº„Ç∏ÁõÆÔºöÊãóÈü≥
              <table className="hiragana-table youon-table">
                <tbody>
                  {youonTable.map((row, i) => (
                    <tr key={i}>
                      {row.map((cell, j) => {
                        const progressStatus = cell && progressData[cell] ? progressData[cell].status : '';
                        const progressClass = `char-cell progress-${progressStatus}`;
                        return (
                          <td 
                            key={j} 
                            className={progressClass}
                            onClick={() => handleCharClick(cell)}
                          >
                            {cell ? (
                              <div className="cell-content">
                                <div className="char-box">{cell}</div>
                                <div className="char-bento-divider"></div>
                                <div className="bento-box">
                                  {renderBentoStack(progressData[cell] ? progressData[cell].goodCount : 0)}
                                </div>
                              </div>
                            ) : null}
                          </td>
                        );
                      })}
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
        </div>
      </div>

      {showWritingGrid && selectedChar && (
        <WritingGrid
          character={selectedChar}
          onClose={handleCloseWritingGrid}
        />
      )}
    </div>
  );
};

export default HiraganaChart; 