import React, { useState, useEffect } from 'react';
import './KatakanaChart.css';
import WritingGrid from '../WritingGrid/WritingGrid';
import { useAuth } from '../../context/AuthContext';
import { characterService } from '../../api/characterService';
import ProgressStack from '../HiraganaChart/ProgressStack';

// ÁîªÂÉè„ÅÆ„Çà„ÅÜ„Å™Ë°®ÂΩ¢Âºè„ÅÆ2Ê¨°ÂÖÉÈÖçÂàó„Éá„Éº„Çø
const mainTable = [
  ['„É≥','„ÉØ','„É©','„É§','„Éû','„Éè','„Éä','„Çø','„Çµ','„Ç´','„Ç¢'],
  ['','','„É™','','„Éü','„Éí','„Éã','„ÉÅ','„Ç∑','„Ç≠','„Ç§'],
  ['','','„É´','„É¶','„É†','„Éï','„Éå','„ÉÑ','„Çπ','„ÇØ','„Ç¶'],
  ['','','„É¨','','„É°','„Éò','„Éç','„ÉÜ','„Çª','„Ç±','„Ç®'],
  ['','„É≤','„É≠','„É®','„É¢','„Éõ','„Éé','„Éà','„ÇΩ','„Ç≥','„Ç™'],
];

// ÊøÅÈü≥„ÉªÂçäÊøÅÈü≥„ÉÜ„Éº„Éñ„É´ÔºàÁ©∫ÁôΩ„Çª„É´„Å™„ÅóÔºâ
const dakuonTable = [
  ['„Ç¨','„Ç∂','„ÉÄ','„Éê','„Éë'],
  ['„ÇÆ','„Ç∏','„ÉÇ','„Éì','„Éî'],
  ['„Ç∞','„Ç∫','„ÉÖ','„Éñ','„Éó'],
  ['„Ç≤','„Çº','„Éá','„Éô','„Éö'],
  ['„Ç¥','„Çæ','„Éâ','„Éú','„Éù'],
];

// ÊãóÈü≥„ÉÜ„Éº„Éñ„É´
const youonTable = [
  ['„Ç≠„É£','„ÇÆ„É£','„Ç∑„É£','„Ç∏„É£','„ÉÅ„É£','„Éã„É£','„Éí„É£','„Éì„É£','„Éî„É£','„Éü„É£','„É™„É£'],
  ['„Ç≠„É•','„ÇÆ„É•','„Ç∑„É•','„Ç∏„É•','„ÉÅ„É•','„Éã„É•','„Éí„É•','„Éì„É•','„Éî„É•','„Éü„É•','„É™„É•'],
  ['„Ç≠„Éß','„ÇÆ„Éß','„Ç∑„Éß','„Ç∏„Éß','„ÉÅ„Éß','„Éã„Éß','„Éí„Éß','„Éì„Éß','„Éî„Éß','„Éü„Éß','„É™„Éß'],
];

const KatakanaChart = ({ onClose }) => {
  const [selectedChar, setSelectedChar] = useState(null);
  const [showWritingGrid, setShowWritingGrid] = useState(false);
  const { isAuthenticated } = useAuth();
  const [progressData, setProgressData] = useState({});
  const [currentPage, setCurrentPage] = useState(0); // 0: Ê∏ÖÈü≥„Éö„Éº„Ç∏, 1: ÊøÅÈü≥„ÉªÂçäÊøÅÈü≥„Éö„Éº„Ç∏, 2: ÊãóÈü≥„Éö„Éº„Ç∏
  const totalPages = 3;

  // „Ç´„Çø„Ç´„Éä„Åã„ÇâID„Å∏„ÅÆÂ§âÊèõ„Éû„ÉÉ„Éî„É≥„Ç∞
  const katakanaToIds = {
    '„Ç¢': 96, '„Ç§': 97, '„Ç¶': 98, '„Ç®': 99, '„Ç™': 100,
    '„Ç´': 101, '„Ç≠': 102, '„ÇØ': 103, '„Ç±': 104, '„Ç≥': 105,
    '„Çµ': 106, '„Ç∑': 107, '„Çπ': 108, '„Çª': 109, '„ÇΩ': 110,
    '„Çø': 111, '„ÉÅ': 112, '„ÉÑ': 113, '„ÉÜ': 114, '„Éà': 115,
    '„Éä': 116, '„Éã': 117, '„Éå': 118, '„Éç': 119, '„Éé': 120,
    '„Éè': 121, '„Éí': 122, '„Éï': 123, '„Éò': 124, '„Éõ': 125,
    '„Éû': 126, '„Éü': 127, '„É†': 128, '„É°': 129, '„É¢': 130,
    '„É§': 131, '„É¶': 132, '„É®': 133,
    '„É©': 134, '„É™': 135, '„É´': 136, '„É¨': 137, '„É≠': 138,
    '„ÉØ': 139, '„É≤': 140, '„É≥': 141,
    '„Ç¨': 142, '„ÇÆ': 143, '„Ç∞': 144, '„Ç≤': 145, '„Ç¥': 146,
    '„Ç∂': 147, '„Ç∏': 148, '„Ç∫': 149, '„Çº': 150, '„Çæ': 151,
    '„ÉÄ': 152, '„ÉÇ': 153, '„ÉÖ': 154, '„Éá': 155, '„Éâ': 156,
    '„Éê': 157, '„Éì': 158, '„Éñ': 159, '„Éô': 160, '„Éú': 161,
    '„Éë': 162, '„Éî': 163, '„Éó': 164, '„Éö': 165, '„Éù': 166,
    '„Ç≠„É£': 167, '„Ç≠„É•': 168, '„Ç≠„Éß': 169,
    '„Ç∑„É£': 170, '„Ç∑„É•': 171, '„Ç∑„Éß': 172,
    '„ÉÅ„É£': 173, '„ÉÅ„É•': 174, '„ÉÅ„Éß': 175,
    '„Éã„É£': 176, '„Éã„É•': 177, '„Éã„Éß': 178,
    '„ÇÆ„É£': 179, '„ÇÆ„É•': 180, '„ÇÆ„Éß': 181,
    '„Ç∏„É£': 182, '„Ç∏„É•': 183, '„Ç∏„Éß': 184,
    '„Éì„É£': 185, '„Éì„É•': 186, '„Éì„Éß': 187,
    '„Éî„É£': 188, '„Éî„É•': 189, '„Éî„Éß': 190
  };

  // ÈÄ≤Êçó„Éá„Éº„Çø„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
  useEffect(() => {
    const fetchProgressData = async () => {
      if (!isAuthenticated) return;
      
      try {
        // ÂêÑ„Ç´„Çø„Ç´„Éä„ÅÆÈÄ≤ÊçóÁä∂Ê≥Å„ÇíÂèñÂæó
        const progressDataTemp = {};
        
        for (const [char, id] of Object.entries(katakanaToIds)) {
          try {
            const results = await characterService.getAllStrokeResults(id);
            if (results && Array.isArray(results)) {
              // 60ÁÇπ‰ª•‰∏ä„ÅÆ„Çπ„Éà„É≠„Éº„ÇØ„ÅÆÊï∞„Çí„Ç´„Ç¶„É≥„Éà
              const goodScoresCount = results.filter(r => r.score >= 60).length;
              // „Å™„Åû„ÇäÊõ∏„ÅçÁµêÊûú„ÅÆÁ∑èÊï∞
              const totalResults = results.length;
              
              progressDataTemp[char] = {
                total: totalResults,
                goodCount: goodScoresCount,
                status: getProgressStatus(goodScoresCount, totalResults)
              };
            }
          } catch (error) {
            console.log(`${char}„ÅÆÈÄ≤ÊçóÂèñÂæó„Ç®„É©„Éº:`, error);
          }
        }
        
        setProgressData(progressDataTemp);
      } catch (error) {
        console.error('ÈÄ≤Êçó„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
      }
    };
    
    fetchProgressData();
  }, [isAuthenticated]);

  // ÈÄ≤ÊçóÁä∂ÊÖã„ÇíÂà§ÂÆö„Åô„ÇãÈñ¢Êï∞
  const getProgressStatus = (goodScoresCount, totalResults) => {
    if (totalResults === 0) return 'not-started';
    if (goodScoresCount === 0) return 'attempted';
    if (goodScoresCount >= 9) return 'completed';
    return 'in-progress';
  };

  const handleCharClick = (char) => {
    if (char) {
      const id = katakanaToIds[char] || null;
      
      setSelectedChar({
        id: id,
        char: char,
        romaji: '',
        image: ''
      });
      setShowWritingGrid(true);
    }
  };

  const handleCloseWritingGrid = () => {
    setShowWritingGrid(false);
    setSelectedChar(null);
    
    // WritingGridÈñâ„Åò„ÅüÂæå„Å´ÈÄ≤Êçó„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
    if (isAuthenticated && selectedChar) {
      const fetchCharProgress = async () => {
        try {
          const id = selectedChar.id;
          const char = selectedChar.char;
          const results = await characterService.getAllStrokeResults(id);
          
          if (results && Array.isArray(results)) {
            const goodScoresCount = results.filter(r => r.score >= 60).length;
            const totalResults = results.length;
            
            setProgressData(prev => ({
              ...prev,
              [char]: {
                total: totalResults,
                goodCount: goodScoresCount,
                status: getProgressStatus(goodScoresCount, totalResults)
              }
            }));
          }
        } catch (error) {
          console.error('ÊñáÂ≠ó„ÅÆÈÄ≤ÊçóÊõ¥Êñ∞„Ç®„É©„Éº:', error);
        }
      };
      
      fetchCharProgress();
    }
  };

  return (
    <div className="katakana-chart-modal-bg">
      <div className="katakana-chart-modal">
        <div className="katakana-chart-header">
          <h2>„Ç´„Çø„Ç´„ÉäË°®</h2>
          <div className="chart-page-tabs-horizontal">
            {[1,2,3].map((num, idx) => (
              <button
                key={num}
                className={`chart-page-tab${currentPage === idx ? ' active' : ''}`}
                onClick={() => setCurrentPage(idx)}
              >
                {num}
              </button>
            ))}
          </div>
          <button className="katakana-chart-close-btn" onClick={onClose}>√ó</button>
        </div>
        <div className="chart-table-wrap">
          <div className="katakana-chart-content">
            {currentPage === 0 ? (
              // Ê∏ÖÈü≥„Éö„Éº„Ç∏
              <table className="katakana-table">
                <tbody>
                  {mainTable.map((row, i) => (
                    <tr key={i}>
                      {row.map((cell, j) => {
                        // ÈÄ≤ÊçóÁä∂ÊÖã„ÅÆ„ÇØ„É©„Çπ„ÇíÂèñÂæó
                        const progressStatus = cell && progressData[cell] ? progressData[cell].status : '';
                        const progressClass = cell ? `char-cell progress-${progressStatus}` : 'empty';
                        
                        return (
                          <td 
                            key={j} 
                            className={progressClass} 
                            onClick={() => cell ? handleCharClick(cell) : null}
                          >
                            {cell ? (
                              <div className="cell-content">
                                <div className="char-box">{cell}</div>
                                <div className="char-bento-divider"></div>
                                <div className="bento-box">
                                  <ProgressStack count={progressData[cell] ? progressData[cell].goodCount : 0} icon="üçØ" />
                                </div>
                              </div>
                            ) : null}
                          </td>
                        );
                      })}
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : currentPage === 1 ? (
              // ÊøÅÈü≥„ÉªÂçäÊøÅÈü≥„Éö„Éº„Ç∏
              <table className="katakana-table dakuon-table">
                <tbody>
                  {dakuonTable.map((row, i) => (
                    <tr key={i}>
                      {row.map((cell, j) => {
                        // ÈÄ≤ÊçóÁä∂ÊÖã„ÅÆ„ÇØ„É©„Çπ„ÇíÂèñÂæó
                        const progressStatus = cell && progressData[cell] ? progressData[cell].status : '';
                        const progressClass = `char-cell progress-${progressStatus}`;
                        
                        return (
                          <td 
                            key={j} 
                            className={progressClass}
                            onClick={() => handleCharClick(cell)}
                          >
                            {cell ? (
                              <div className="cell-content">
                                <div className="char-box">{cell}</div>
                                <div className="char-bento-divider"></div>
                                <div className="bento-box">
                                  <ProgressStack count={progressData[cell] ? progressData[cell].goodCount : 0} icon="üçØ" />
                                </div>
                              </div>
                            ) : null}
                          </td>
                        );
                      })}
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : (
              // 3„Éö„Éº„Ç∏ÁõÆÔºöÊãóÈü≥
              <table className="katakana-table youon-table">
                <tbody>
                  {youonTable.map((row, i) => (
                    <tr key={i}>
                      {row.map((cell, j) => {
                        const progressStatus = cell && progressData[cell] ? progressData[cell].status : '';
                        const progressClass = `char-cell progress-${progressStatus}`;
                        return (
                          <td 
                            key={j} 
                            className={progressClass}
                            onClick={() => handleCharClick(cell)}
                          >
                            {cell ? (
                              <div className="cell-content">
                                <div className="char-box">{cell}</div>
                                <div className="char-bento-divider"></div>
                                <div className="bento-box">
                                  <ProgressStack count={progressData[cell] ? progressData[cell].goodCount : 0} icon="üçØ" />
                                </div>
                              </div>
                            ) : null}
                          </td>
                        );
                      })}
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
        </div>
      </div>

      {showWritingGrid && selectedChar && (
        <WritingGrid
          character={selectedChar}
          onClose={handleCloseWritingGrid}
          type="KATAKANA"
        />
      )}
    </div>
  );
};

export default KatakanaChart; 